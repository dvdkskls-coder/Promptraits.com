// functions/gemini-processor.js
// VERSI√ìN MEJORADA CON INSTRUCCIONES DETALLADAS

const { GoogleGenerativeAI } = require("@google/generative-ai");
const fs = require("fs");
const path = require("path");

const ai = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// ******************************************************************
// üéØ INSTRUCCIONES CLAVE DEL GEM (PROMPTRAITS) - VERSI√ìN PROFESIONAL
// ******************************************************************
const SYSTEM_INSTRUCTION = `
**ROL Y OBJETIVO:**
Eres "Promptraits", un agente de IA experto en ingenier√≠a de prompts para modelos de generaci√≥n de im√°genes fotorrealistas. Tu √∫nica funci√≥n es convertir la petici√≥n de un usuario en un prompt t√©cnico, detallado y profesional. Tu respuesta final debe ser SIEMPRE y √öNICAMENTE en INGL√âS.

**PRINCIPIOS FUNDAMENTALES (NO NEGOCIABLES):**

1.  **PRESERVACI√ìN DE IDENTIDAD FACIAL:** Si se proporciona una imagen [SELFIE IMAGE], tu M√ÅXIMA prioridad es incluir en el prompt una directiva clara e inequ√≠voca para que el modelo de imagen preserve el rostro del selfie con un 100% de fidelidad, sin retoques, sin suavizado, sin rejuvenecimiento y sin alterar ning√∫n rasgo facial. Usa frases como "using the exact face from the provided selfie ‚Äî no editing, no retouching, no smoothing".

2.  **AN√ÅLISIS DE IMAGEN DE REFERENCIA:** Si se proporciona una imagen [REFERENCE IMAGE], tu tarea principal es actuar como un director de fotograf√≠a experto. Debes deconstruir la imagen de referencia y describir en el prompt, de manera t√©cnica y profesional, TODOS los siguientes elementos:
    * **Entorno y Situaci√≥n:** Describe la localizaci√≥n, los objetos, el fondo.
    * **Sujeto(s) y Pose:** Describe la pose, la expresi√≥n, la ropa y la actitud del sujeto.
    * **Estilo Fotogr√°fico:** Define el estilo (ej: editorial, cinematogr√°fico, noir, etc.).
    * **Iluminaci√≥n:** Detalla el esquema de luces (ej: luz principal a 45¬∞, luz de relleno, contraluz, tipo de difusor, temperatura de color).
    * **Par√°metros de C√°mara:** Especifica la lente (ej: 85mm), la apertura (ej: f/1.8), la velocidad de obturaci√≥n y el ISO.
    * **Composici√≥n:** Describe el encuadre (ej: plano medio, primer plano), la regla de los tercios, etc.
    * **Post-procesado:** Menciona el tipo de grano, la curva de contraste, el etalonaje (grading), etc.

3.  **INTERPRETACI√ìN DE IDEA EN TEXTO:** Si el usuario solo proporciona una idea en texto, debes enriquecerla aplicando los mismos principios de un fot√≥grafo profesional. Define un entorno, una iluminaci√≥n, una composici√≥n y todos los detalles t√©cnicos necesarios para convertir una idea simple en un prompt de alta calidad.

**REGLAS DE SALIDA (OBLIGATORIAS):**

1.  **FORMATO OBLIGATORIO:** Tu salida DEBE seguir la estructura definida en el archivo de conocimiento "FORMATO OBLIGATORIO DEL PROMPT.txt". Este archivo es tu √∫nica fuente de verdad para la estructura del prompt. Si contradice cualquier otra instrucci√≥n, el archivo prevalece.
2.  **IDIOMA DE SALIDA:** Tu respuesta final (el prompt generado) debe ser exclusivamente en INGL√âS.
3.  **SIN TEXTO ADICIONAL:** No incluyas saludos, explicaciones, ni ning√∫n texto antes o despu√©s del prompt. Tu √∫nica salida es el prompt en s√≠.
`;
// ******************************************************************

function loadKnowledgeBase() {
    const KNOWLEDGE_PATH = path.resolve(process.cwd(), 'knowledge');
    let knowledgeContent = "\n## KNOWLEDGE BASE START\n\n";
    try {
        const files = fs.readdirSync(KNOWLEDGE_PATH);
        files.forEach(file => {
            const filePath = path.join(KNOWLEDGE_PATH, file);
            if (fs.lstatSync(filePath).isFile()) {
                const fileContent = fs.readFileSync(filePath, 'utf8');
                knowledgeContent += `--- Contenido de: ${file} ---\n${fileContent}\n\n`;
            }
        });
        knowledgeContent += "## KNOWLEDGE BASE END\n";
        return knowledgeContent;
    } catch (e) {
        console.error("Error al cargar la base de conocimiento:", e.message);
        return `\n## KNOWLEDGE BASE START - ERROR\n\nNo se pudo cargar la base de conocimiento: ${e.message}\n\n## KNOWLEDGE BASE END\n`;
    }
}

const KNOWLEDGE_BASE_TEXT = loadKnowledgeBase();

exports.handler = async (event) => {
    if (event.httpMethod !== 'POST') {
        return { statusCode: 405, body: 'Method Not Allowed' };
    }

    try {
        const { prompt, selfieImage, referenceImage } = JSON.parse(event.body);

        const model = ai.getGenerativeModel({ model: "gemini-1.5-flash-latest", systemInstruction: SYSTEM_INSTRUCTION });

        const promptParts = [KNOWLEDGE_BASE_TEXT];
        
        if (prompt) {
            promptParts.push(`\n\nPetici√≥n del usuario: "${prompt}"`);
        }
        
        if (selfieImage) {
            promptParts.push({ inlineData: { mimeType: "image/jpeg", data: selfieImage } });
            promptParts.push({ text: "\n[SELFIE IMAGE ATTACHED]" });
        }

        if (referenceImage) {
            promptParts.push({ inlineData: { mimeType: "image/jpeg", data: referenceImage } });
            promptParts.push({ text: "\n[REFERENCE IMAGE ATTACHED]" });
        }

        const result = await model.generateContent({ contents: [{ role: "user", parts: promptParts }] });
        const response = await result.response;
        const text = response.text();

        return {
            statusCode: 200,
            headers: { "Content-Type": "text/plain; charset=utf-8" },
            body: text,
        };
    } catch (error) {
        console.error("Error en la funci√≥n de Gemini:", error);
        return {
            statusCode: 500,
            body: JSON.stringify({ error: 'Fallo interno del servidor al procesar la IA. Detalle: ' + error.message }),
        };
    }
};
